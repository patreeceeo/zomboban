name: DevOps

on:
  push:
    branches:
      - main

concurrency:
  group: devops

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: NODE_ENV=production npm run build

      - name: Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

        # TODO avoid using root user for security reasons
      - name: Deploy to production
        run: |
          echo "Deploying to production server..."
          echo "${{ secrets.SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          # upload the client build
          scp -i /tmp/ssh_key -r dist root@${{ secrets.DROPLET_IP }}:Code/zomboban
          # upload the backend
          scp -i /tmp/ssh_key -r src root@${{ secrets.DROPLET_IP }}:Code/zomboban
          # restart the backend
          ssh -i /tmp/ssh_key root@${{ secrets.DROPLET_IP }} "cd Code/zomboban && npm install && pm2 restart serve"

      - name: Configure HTTPS with Caddy
        run: |
          echo "${{ secrets.SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # Create Caddyfile configuration
          cat > /tmp/Caddyfile << 'EOF'
          ${{ secrets.DOMAIN_NAME }} {
              # Automatic HTTPS with Let's Encrypt using DigitalOcean DNS
              tls ${{ secrets.LETSENCRYPT_EMAIL }} {
                  dns digitalocean {env.DIGITAL_OCEAN_API_TOKEN}
              }
              
              # Security headers
              header {
                  Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
                  X-Frame-Options "SAMEORIGIN"
                  X-Content-Type-Options "nosniff"
                  X-XSS-Protection "1; mode=block"
                  Referrer-Policy "strict-origin-when-cross-origin"
              }
              
              # Reverse proxy to Node.js application
              reverse_proxy localhost:${{ secrets.SERVER_PORT || 3000 }} {
                  header_up X-Real-IP {remote_host}
                  header_up X-Forwarded-For {remote_host}
                  header_up X-Forwarded-Proto {scheme}
              }
              
              # Enable compression
              encode gzip zstd
              
              # Logging to stdout (will be captured by systemd/journald)
              log {
                  output stdout
                  format console
              }
          }
          EOF
          
          # Install Caddy with DigitalOcean DNS module using pre-built binary
          ssh -i /tmp/ssh_key root@${{ secrets.DROPLET_IP }} "
            # Remove existing Caddy package if installed
            if dpkg -l | grep -q '^ii.*caddy'; then
              systemctl stop caddy 2>/dev/null || true
              systemctl disable caddy 2>/dev/null || true
              apt-get remove -y caddy
              apt-get purge -y caddy
            fi
            
            # Stop existing Caddy service if running
            systemctl stop caddy 2>/dev/null || true
            
            # Download pre-built Caddy with DigitalOcean DNS module from Caddy build server
            # Using Caddy download API to get custom build
            curl -L -o /tmp/caddy 'https://caddyserver.com/api/download?os=linux&arch=amd64&p=github.com%2Fcaddy-dns%2Fdigitalocean'
            
            # Install the custom Caddy binary
            mv /tmp/caddy /usr/bin/caddy
            chmod 755 /usr/bin/caddy
            
            # Create caddy user and group if not exists
            id -u caddy &>/dev/null || useradd -r -d /var/lib/caddy -s /usr/sbin/nologin caddy
            
            # Create necessary directories
            mkdir -p /etc/caddy
            mkdir -p /var/lib/caddy
            mkdir -p /etc/systemd/system
            chown -R caddy:caddy /var/lib/caddy
          "
          
          # Deploy Caddyfile
          scp -i /tmp/ssh_key /tmp/Caddyfile root@${{ secrets.DROPLET_IP }}:/etc/caddy/Caddyfile
          
          # Create systemd service with environment variable
          cat > /tmp/caddy.service << 'EOSERVICE'
          [Unit]
          Description=Caddy
          Documentation=https://caddyserver.com/docs/
          After=network.target network-online.target
          Requires=network-online.target
          
          [Service]
          Type=notify
          User=caddy
          Group=caddy
          Environment=DIGITAL_OCEAN_API_TOKEN=${{ secrets.DIGITAL_OCEAN_API_TOKEN }}
          ExecStart=/usr/bin/caddy run --environ --config /etc/caddy/Caddyfile
          ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force
          TimeoutStopSec=5s
          LimitNOFILE=1048576
          LimitNPROC=512
          PrivateTmp=true
          ProtectSystem=strict
          ReadWritePaths=/var/lib/caddy
          AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
          
          [Install]
          WantedBy=multi-user.target
          EOSERVICE
          
          # Deploy service file and fix formatting
          scp -i /tmp/ssh_key /tmp/caddy.service root@${{ secrets.DROPLET_IP }}:/tmp/caddy.service
          ssh -i /tmp/ssh_key root@${{ secrets.DROPLET_IP }} "
            # Remove indentation from service file and move to correct location
            sed 's/^          //' /tmp/caddy.service > /etc/systemd/system/caddy.service
            rm /tmp/caddy.service
            
            # Set proper permissions on Caddyfile
            chown caddy:caddy /etc/caddy/Caddyfile
            chmod 644 /etc/caddy/Caddyfile
            
            # Reload systemd and start Caddy
            systemctl daemon-reload
            systemctl enable caddy
            systemctl restart caddy
          "

  lighthouse:
    runs-on: ubuntu-latest
    needs: [build_and_deploy]
    steps:
    - uses: actions/checkout@master
    - name: Lighthouse
      uses: foo-software/lighthouse-check-action@master
      with:
        urls: https://${{ secrets.DOMAIN_NAME }}
